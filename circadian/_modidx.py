# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/circadian',
                'doc_host': 'https://khannay.github.io',
                'git_url': 'https://github.com/khannay/circadian',
                'lib_path': 'circadian'},
  'syms': { 'circadian.cli': { 'circadian.cli.main_acto': ('cli.html#main_acto', 'circadian/cli.py'),
                               'circadian.cli.main_esri': ('cli.html#main_esri', 'circadian/cli.py')},
            'circadian.lights': { 'circadian.lights.Light': ('lights.html#light', 'circadian/lights.py'),
                                  'circadian.lights.Light.__add__': ('lights.html#light.__add__', 'circadian/lights.py'),
                                  'circadian.lights.Light.__call__': ('lights.html#light.__call__', 'circadian/lights.py'),
                                  'circadian.lights.Light.__init__': ('lights.html#light.__init__', 'circadian/lights.py'),
                                  'circadian.lights.Light.end_time': ('lights.html#light.end_time', 'circadian/lights.py'),
                                  'circadian.lights.Light.numpy': ('lights.html#light.numpy', 'circadian/lights.py'),
                                  'circadian.lights.Light.plot': ('lights.html#light.plot', 'circadian/lights.py'),
                                  'circadian.lights.RegularLight': ('lights.html#regularlight', 'circadian/lights.py'),
                                  'circadian.lights.ShiftWorkLight': ('lights.html#shiftworklight', 'circadian/lights.py'),
                                  'circadian.lights.ShiftWorkerThreeTwelves': ( 'lights.html#shiftworkerthreetwelves',
                                                                                'circadian/lights.py'),
                                  'circadian.lights.SlamShift': ('lights.html#slamshift', 'circadian/lights.py'),
                                  'circadian.lights.SocialJetLag': ('lights.html#socialjetlag', 'circadian/lights.py'),
                                  'circadian.lights.get_pulse': ('lights.html#get_pulse', 'circadian/lights.py'),
                                  'circadian.lights.make_pulse': ('lights.html#make_pulse', 'circadian/lights.py')},
            'circadian.metrics': { 'circadian.metrics.esri': ('metrics.html#esri', 'circadian/metrics.py'),
                                   'circadian.metrics.esri_trajectory': ('metrics.html#esri_trajectory', 'circadian/metrics.py')},
            'circadian.models': { 'circadian.models.CircadianModel': ('models.html#circadianmodel', 'circadian/models.py'),
                                  'circadian.models.CircadianModel.CBTObs': ('models.html#circadianmodel.cbtobs', 'circadian/models.py'),
                                  'circadian.models.CircadianModel.DLMOObs': ('models.html#circadianmodel.dlmoobs', 'circadian/models.py'),
                                  'circadian.models.CircadianModel.__call__': ( 'models.html#circadianmodel.__call__',
                                                                                'circadian/models.py'),
                                  'circadian.models.CircadianModel.__init__': ( 'models.html#circadianmodel.__init__',
                                                                                'circadian/models.py'),
                                  'circadian.models.CircadianModel._default_params': ( 'models.html#circadianmodel._default_params',
                                                                                       'circadian/models.py'),
                                  'circadian.models.CircadianModel.amplitude': ( 'models.html#circadianmodel.amplitude',
                                                                                 'circadian/models.py'),
                                  'circadian.models.CircadianModel.default_initial_conditions': ( 'models.html#circadianmodel.default_initial_conditions',
                                                                                                  'circadian/models.py'),
                                  'circadian.models.CircadianModel.initial_conditions_loop': ( 'models.html#circadianmodel.initial_conditions_loop',
                                                                                               'circadian/models.py'),
                                  'circadian.models.CircadianModel.integrate_model': ( 'models.html#circadianmodel.integrate_model',
                                                                                       'circadian/models.py'),
                                  'circadian.models.CircadianModel.phase': ('models.html#circadianmodel.phase', 'circadian/models.py'),
                                  'circadian.models.CircadianModel.step_rk4': ( 'models.html#circadianmodel.step_rk4',
                                                                                'circadian/models.py'),
                                  'circadian.models.Forger99Model': ('models.html#forger99model', 'circadian/models.py'),
                                  'circadian.models.Forger99Model.CBTObs': ('models.html#forger99model.cbtobs', 'circadian/models.py'),
                                  'circadian.models.Forger99Model.DLMOObs': ('models.html#forger99model.dlmoobs', 'circadian/models.py'),
                                  'circadian.models.Forger99Model.__init__': ('models.html#forger99model.__init__', 'circadian/models.py'),
                                  'circadian.models.Forger99Model._default_params': ( 'models.html#forger99model._default_params',
                                                                                      'circadian/models.py'),
                                  'circadian.models.Forger99Model.alpha0': ('models.html#forger99model.alpha0', 'circadian/models.py'),
                                  'circadian.models.Forger99Model.amplitude': ( 'models.html#forger99model.amplitude',
                                                                                'circadian/models.py'),
                                  'circadian.models.Forger99Model.default_initial_conditions': ( 'models.html#forger99model.default_initial_conditions',
                                                                                                 'circadian/models.py'),
                                  'circadian.models.Forger99Model.derv': ('models.html#forger99model.derv', 'circadian/models.py'),
                                  'circadian.models.Forger99Model.get_parameters': ( 'models.html#forger99model.get_parameters',
                                                                                     'circadian/models.py'),
                                  'circadian.models.Forger99Model.get_parameters_array': ( 'models.html#forger99model.get_parameters_array',
                                                                                           'circadian/models.py'),
                                  'circadian.models.Forger99Model.guessICDataForger99': ( 'models.html#forger99model.guessicdataforger99',
                                                                                          'circadian/models.py'),
                                  'circadian.models.Forger99Model.integrate_observer': ( 'models.html#forger99model.integrate_observer',
                                                                                         'circadian/models.py'),
                                  'circadian.models.Forger99Model.phase': ('models.html#forger99model.phase', 'circadian/models.py'),
                                  'circadian.models.Forger99Model.set_parameters': ( 'models.html#forger99model.set_parameters',
                                                                                     'circadian/models.py'),
                                  'circadian.models.SinglePopModel': ('models.html#singlepopmodel', 'circadian/models.py'),
                                  'circadian.models.SinglePopModel.CBTObs': ('models.html#singlepopmodel.cbtobs', 'circadian/models.py'),
                                  'circadian.models.SinglePopModel.DLMOObs': ('models.html#singlepopmodel.dlmoobs', 'circadian/models.py'),
                                  'circadian.models.SinglePopModel.__init__': ( 'models.html#singlepopmodel.__init__',
                                                                                'circadian/models.py'),
                                  'circadian.models.SinglePopModel._default_params': ( 'models.html#singlepopmodel._default_params',
                                                                                       'circadian/models.py'),
                                  'circadian.models.SinglePopModel.alpha0': ('models.html#singlepopmodel.alpha0', 'circadian/models.py'),
                                  'circadian.models.SinglePopModel.amplitude': ( 'models.html#singlepopmodel.amplitude',
                                                                                 'circadian/models.py'),
                                  'circadian.models.SinglePopModel.default_initial_conditions': ( 'models.html#singlepopmodel.default_initial_conditions',
                                                                                                  'circadian/models.py'),
                                  'circadian.models.SinglePopModel.derv': ('models.html#singlepopmodel.derv', 'circadian/models.py'),
                                  'circadian.models.SinglePopModel.get_parameters': ( 'models.html#singlepopmodel.get_parameters',
                                                                                      'circadian/models.py'),
                                  'circadian.models.SinglePopModel.get_parameters_array': ( 'models.html#singlepopmodel.get_parameters_array',
                                                                                            'circadian/models.py'),
                                  'circadian.models.SinglePopModel.integrate_observer': ( 'models.html#singlepopmodel.integrate_observer',
                                                                                          'circadian/models.py'),
                                  'circadian.models.SinglePopModel.phase': ('models.html#singlepopmodel.phase', 'circadian/models.py'),
                                  'circadian.models.SinglePopModel.set_parameters': ( 'models.html#singlepopmodel.set_parameters',
                                                                                      'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel': ('models.html#twopopulationmodel', 'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.CBTObs': ( 'models.html#twopopulationmodel.cbtobs',
                                                                                  'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.DLMOObs': ( 'models.html#twopopulationmodel.dlmoobs',
                                                                                   'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.__init__': ( 'models.html#twopopulationmodel.__init__',
                                                                                    'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel._default_params': ( 'models.html#twopopulationmodel._default_params',
                                                                                           'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.alpha0': ( 'models.html#twopopulationmodel.alpha0',
                                                                                  'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.amplitude': ( 'models.html#twopopulationmodel.amplitude',
                                                                                     'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.default_initial_conditions': ( 'models.html#twopopulationmodel.default_initial_conditions',
                                                                                                      'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.derv': ( 'models.html#twopopulationmodel.derv',
                                                                                'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.get_parameters': ( 'models.html#twopopulationmodel.get_parameters',
                                                                                          'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.get_parameters_array': ( 'models.html#twopopulationmodel.get_parameters_array',
                                                                                                'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.guessICDataTwoPop': ( 'models.html#twopopulationmodel.guessicdatatwopop',
                                                                                             'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.integrate_observer': ( 'models.html#twopopulationmodel.integrate_observer',
                                                                                              'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.phase': ( 'models.html#twopopulationmodel.phase',
                                                                                 'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.phase_difference': ( 'models.html#twopopulationmodel.phase_difference',
                                                                                            'circadian/models.py'),
                                  'circadian.models.TwoPopulationModel.set_parameters': ( 'models.html#twopopulationmodel.set_parameters',
                                                                                          'circadian/models.py')},
            'circadian.plots': { 'circadian.plots.Actogram': ('plots.html#actogram', 'circadian/plots.py'),
                                 'circadian.plots.Actogram.__init__': ('plots.html#actogram.__init__', 'circadian/plots.py'),
                                 'circadian.plots.Actogram.addLightSchedule': ( 'plots.html#actogram.addlightschedule',
                                                                                'circadian/plots.py'),
                                 'circadian.plots.Actogram.addRect': ('plots.html#actogram.addrect', 'circadian/plots.py'),
                                 'circadian.plots.Actogram.getRectangles': ('plots.html#actogram.getrectangles', 'circadian/plots.py'),
                                 'circadian.plots.Actogram.plot_phasemarker': ( 'plots.html#actogram.plot_phasemarker',
                                                                                'circadian/plots.py'),
                                 'circadian.plots.Actogram.plot_phasetimes': ('plots.html#actogram.plot_phasetimes', 'circadian/plots.py'),
                                 'circadian.plots.Stroboscopic': ('plots.html#stroboscopic', 'circadian/plots.py'),
                                 'circadian.plots.Stroboscopic.__init__': ('plots.html#stroboscopic.__init__', 'circadian/plots.py'),
                                 'circadian.plots.Stroboscopic._make_strobo_plot': ( 'plots.html#stroboscopic._make_strobo_plot',
                                                                                     'circadian/plots.py'),
                                 'circadian.plots.Stroboscopic.add_strobo_plot': ( 'plots.html#stroboscopic.add_strobo_plot',
                                                                                   'circadian/plots.py'),
                                 'circadian.plots.plot_mae': ('plots.html#plot_mae', 'circadian/plots.py'),
                                 'circadian.plots.plot_torus': ('plots.html#plot_torus', 'circadian/plots.py')},
            'circadian.readers': { 'circadian.readers.WearableData': ('readers.html#wearabledata', 'circadian/readers.py'),
                                   'circadian.readers.WearableData.__post_init__': ( 'readers.html#wearabledata.__post_init__',
                                                                                     'circadian/readers.py'),
                                   'circadian.readers.WearableData.build_sleep_chunks': ( 'readers.html#wearabledata.build_sleep_chunks',
                                                                                          'circadian/readers.py'),
                                   'circadian.readers.WearableData.find_disruptions': ( 'readers.html#wearabledata.find_disruptions',
                                                                                        'circadian/readers.py'),
                                   'circadian.readers.WearableData.flatten': ('readers.html#wearabledata.flatten', 'circadian/readers.py'),
                                   'circadian.readers.WearableData.from_json': ( 'readers.html#wearabledata.from_json',
                                                                                 'circadian/readers.py'),
                                   'circadian.readers.WearableData.get_bounds': ( 'readers.html#wearabledata.get_bounds',
                                                                                  'circadian/readers.py'),
                                   'circadian.readers.WearableData.get_date': ( 'readers.html#wearabledata.get_date',
                                                                                'circadian/readers.py'),
                                   'circadian.readers.WearableData.get_light': ( 'readers.html#wearabledata.get_light',
                                                                                 'circadian/readers.py'),
                                   'circadian.readers.WearableData.get_timestamp': ( 'readers.html#wearabledata.get_timestamp',
                                                                                     'circadian/readers.py'),
                                   'circadian.readers.WearableData.plot_heartrate': ( 'readers.html#wearabledata.plot_heartrate',
                                                                                      'circadian/readers.py'),
                                   'circadian.readers.WearableData.plot_hr_steps': ( 'readers.html#wearabledata.plot_hr_steps',
                                                                                     'circadian/readers.py'),
                                   'circadian.readers.WearableData.plot_light_activity': ( 'readers.html#wearabledata.plot_light_activity',
                                                                                           'circadian/readers.py'),
                                   'circadian.readers.WearableData.process_actiwatch': ( 'readers.html#wearabledata.process_actiwatch',
                                                                                         'circadian/readers.py'),
                                   'circadian.readers.WearableData.scatter_hr_steps': ( 'readers.html#wearabledata.scatter_hr_steps',
                                                                                        'circadian/readers.py'),
                                   'circadian.readers.WearableData.steps_hr_loglinear': ( 'readers.html#wearabledata.steps_hr_loglinear',
                                                                                          'circadian/readers.py'),
                                   'circadian.readers.WearableData.to_json': ('readers.html#wearabledata.to_json', 'circadian/readers.py'),
                                   'circadian.readers.WearableData.trim_data': ( 'readers.html#wearabledata.trim_data',
                                                                                 'circadian/readers.py'),
                                   'circadian.readers.WearableData.trim_data_idx': ( 'readers.html#wearabledata.trim_data_idx',
                                                                                     'circadian/readers.py'),
                                   'circadian.readers.WearableData.utc_to_hrs': ( 'readers.html#wearabledata.utc_to_hrs',
                                                                                  'circadian/readers.py'),
                                   'circadian.readers.combine_wearable_streams': ( 'readers.html#combine_wearable_streams',
                                                                                   'circadian/readers.py'),
                                   'circadian.readers.read_standard_csv': ('readers.html#read_standard_csv', 'circadian/readers.py'),
                                   'circadian.readers.read_standard_json': ('readers.html#read_standard_json', 'circadian/readers.py')},
            'circadian.sleep': { 'circadian.sleep.TwoProcessModel': ('sleep.html#twoprocessmodel', 'circadian/sleep.py'),
                                 'circadian.sleep.TwoProcessModel.__call__': ('sleep.html#twoprocessmodel.__call__', 'circadian/sleep.py'),
                                 'circadian.sleep.TwoProcessModel.__init__': ('sleep.html#twoprocessmodel.__init__', 'circadian/sleep.py'),
                                 'circadian.sleep.TwoProcessModel.check_wake_status': ( 'sleep.html#twoprocessmodel.check_wake_status',
                                                                                        'circadian/sleep.py'),
                                 'circadian.sleep.TwoProcessModel.dhomeostat': ( 'sleep.html#twoprocessmodel.dhomeostat',
                                                                                 'circadian/sleep.py'),
                                 'circadian.sleep.cluster_sleep_periods_scipy': ( 'sleep.html#cluster_sleep_periods_scipy',
                                                                                  'circadian/sleep.py'),
                                 'circadian.sleep.sleep_midpoint': ('sleep.html#sleep_midpoint', 'circadian/sleep.py')},
            'circadian.utils': { 'circadian.utils.NpEncoder': ('utils.html#npencoder', 'circadian/utils.py'),
                                 'circadian.utils.NpEncoder.default': ('utils.html#npencoder.default', 'circadian/utils.py'),
                                 'circadian.utils.abs_hour_diff': ('utils.html#abs_hour_diff', 'circadian/utils.py'),
                                 'circadian.utils.angle_difference': ('utils.html#angle_difference', 'circadian/utils.py'),
                                 'circadian.utils.cal_days_diff': ('utils.html#cal_days_diff', 'circadian/utils.py'),
                                 'circadian.utils.circular_av_clock': ('utils.html#circular_av_clock', 'circadian/utils.py'),
                                 'circadian.utils.circular_mean': ('utils.html#circular_mean', 'circadian/utils.py'),
                                 'circadian.utils.circular_scatter': ('utils.html#circular_scatter', 'circadian/utils.py'),
                                 'circadian.utils.convert_binary': ('utils.html#convert_binary', 'circadian/utils.py'),
                                 'circadian.utils.cut_phases_12': ('utils.html#cut_phases_12', 'circadian/utils.py'),
                                 'circadian.utils.interpolateLinear': ('utils.html#interpolatelinear', 'circadian/utils.py'),
                                 'circadian.utils.interpolateLinearExt': ('utils.html#interpolatelinearext', 'circadian/utils.py'),
                                 'circadian.utils.parse_dt': ('utils.html#parse_dt', 'circadian/utils.py'),
                                 'circadian.utils.phase_coherence': ('utils.html#phase_coherence', 'circadian/utils.py'),
                                 'circadian.utils.phase_coherence_clock': ('utils.html#phase_coherence_clock', 'circadian/utils.py'),
                                 'circadian.utils.phase_ic_guess': ('utils.html#phase_ic_guess', 'circadian/utils.py'),
                                 'circadian.utils.simple_norm_stepshr_sleep_classifier': ( 'utils.html#simple_norm_stepshr_sleep_classifier',
                                                                                           'circadian/utils.py'),
                                 'circadian.utils.split_drop_data': ('utils.html#split_drop_data', 'circadian/utils.py'),
                                 'circadian.utils.split_missing_data': ('utils.html#split_missing_data', 'circadian/utils.py'),
                                 'circadian.utils.subtract_clock_times': ('utils.html#subtract_clock_times', 'circadian/utils.py'),
                                 'circadian.utils.times_to_angle': ('utils.html#times_to_angle', 'circadian/utils.py'),
                                 'circadian.utils.timezone_mapper': ('utils.html#timezone_mapper', 'circadian/utils.py')}}}
