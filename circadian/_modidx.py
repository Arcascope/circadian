# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/circadian',
                'doc_host': 'https://arcascope.github.io/circadian/',
                'git_url': 'https://github.com/Arcascope/circadian',
                'lib_path': 'circadian'},
  'syms': { 'circadian.cli': { 'circadian.cli.main_acto': ('api/cli.html#main_acto', 'circadian/cli.py'),
                               'circadian.cli.main_esri': ('api/cli.html#main_esri', 'circadian/cli.py')},
            'circadian.lights': { 'circadian.lights.LightSchedule': ('api/lights.html#lightschedule', 'circadian/lights.py'),
                                  'circadian.lights.LightSchedule.Regular': ( 'api/lights.html#lightschedule.regular',
                                                                              'circadian/lights.py'),
                                  'circadian.lights.LightSchedule.ShiftWork': ( 'api/lights.html#lightschedule.shiftwork',
                                                                                'circadian/lights.py'),
                                  'circadian.lights.LightSchedule.SlamShift': ( 'api/lights.html#lightschedule.slamshift',
                                                                                'circadian/lights.py'),
                                  'circadian.lights.LightSchedule.SocialJetlag': ( 'api/lights.html#lightschedule.socialjetlag',
                                                                                   'circadian/lights.py'),
                                  'circadian.lights.LightSchedule.__add__': ( 'api/lights.html#lightschedule.__add__',
                                                                              'circadian/lights.py'),
                                  'circadian.lights.LightSchedule.__call__': ( 'api/lights.html#lightschedule.__call__',
                                                                               'circadian/lights.py'),
                                  'circadian.lights.LightSchedule.__init__': ( 'api/lights.html#lightschedule.__init__',
                                                                               'circadian/lights.py'),
                                  'circadian.lights.LightSchedule.__sub__': ( 'api/lights.html#lightschedule.__sub__',
                                                                              'circadian/lights.py'),
                                  'circadian.lights.LightSchedule.concatenate_at': ( 'api/lights.html#lightschedule.concatenate_at',
                                                                                     'circadian/lights.py'),
                                  'circadian.lights.LightSchedule.from_pulse': ( 'api/lights.html#lightschedule.from_pulse',
                                                                                 'circadian/lights.py'),
                                  'circadian.lights.LightSchedule.plot': ('api/lights.html#lightschedule.plot', 'circadian/lights.py')},
            'circadian.metrics': { 'circadian.metrics.esri': ('api/metrics.html#esri', 'circadian/metrics.py'),
                                   'circadian.metrics.esri_trajectory': ('api/metrics.html#esri_trajectory', 'circadian/metrics.py')},
            'circadian.models': { 'circadian.models.CircadianModel': ('api/models.html#circadianmodel', 'circadian/models.py'),
                                  'circadian.models.CircadianModel.__call__': ( 'api/models.html#circadianmodel.__call__',
                                                                                'circadian/models.py'),
                                  'circadian.models.CircadianModel.__init__': ( 'api/models.html#circadianmodel.__init__',
                                                                                'circadian/models.py'),
                                  'circadian.models.CircadianModel._default_initial_condition': ( 'api/models.html#circadianmodel._default_initial_condition',
                                                                                                  'circadian/models.py'),
                                  'circadian.models.CircadianModel._default_params': ( 'api/models.html#circadianmodel._default_params',
                                                                                       'circadian/models.py'),
                                  'circadian.models.CircadianModel._num_inputs': ( 'api/models.html#circadianmodel._num_inputs',
                                                                                   'circadian/models.py'),
                                  'circadian.models.CircadianModel._num_states': ( 'api/models.html#circadianmodel._num_states',
                                                                                   'circadian/models.py'),
                                  'circadian.models.CircadianModel.amplitude': ( 'api/models.html#circadianmodel.amplitude',
                                                                                 'circadian/models.py'),
                                  'circadian.models.CircadianModel.cbt': ('api/models.html#circadianmodel.cbt', 'circadian/models.py'),
                                  'circadian.models.CircadianModel.derv': ('api/models.html#circadianmodel.derv', 'circadian/models.py'),
                                  'circadian.models.CircadianModel.dlmos': ('api/models.html#circadianmodel.dlmos', 'circadian/models.py'),
                                  'circadian.models.CircadianModel.equilibrate': ( 'api/models.html#circadianmodel.equilibrate',
                                                                                   'circadian/models.py'),
                                  'circadian.models.CircadianModel.get_parameters_array': ( 'api/models.html#circadianmodel.get_parameters_array',
                                                                                            'circadian/models.py'),
                                  'circadian.models.CircadianModel.initial_condition': ( 'api/models.html#circadianmodel.initial_condition',
                                                                                         'circadian/models.py'),
                                  'circadian.models.CircadianModel.integrate': ( 'api/models.html#circadianmodel.integrate',
                                                                                 'circadian/models.py'),
                                  'circadian.models.CircadianModel.parameters': ( 'api/models.html#circadianmodel.parameters',
                                                                                  'circadian/models.py'),
                                  'circadian.models.CircadianModel.phase': ('api/models.html#circadianmodel.phase', 'circadian/models.py'),
                                  'circadian.models.CircadianModel.step_rk4': ( 'api/models.html#circadianmodel.step_rk4',
                                                                                'circadian/models.py'),
                                  'circadian.models.CircadianModel.trajectory': ( 'api/models.html#circadianmodel.trajectory',
                                                                                  'circadian/models.py'),
                                  'circadian.models.DynamicalTrajectory': ('api/models.html#dynamicaltrajectory', 'circadian/models.py'),
                                  'circadian.models.DynamicalTrajectory.__call__': ( 'api/models.html#dynamicaltrajectory.__call__',
                                                                                     'circadian/models.py'),
                                  'circadian.models.DynamicalTrajectory.__getitem__': ( 'api/models.html#dynamicaltrajectory.__getitem__',
                                                                                        'circadian/models.py'),
                                  'circadian.models.DynamicalTrajectory.__init__': ( 'api/models.html#dynamicaltrajectory.__init__',
                                                                                     'circadian/models.py'),
                                  'circadian.models.DynamicalTrajectory.__len__': ( 'api/models.html#dynamicaltrajectory.__len__',
                                                                                    'circadian/models.py'),
                                  'circadian.models.DynamicalTrajectory.__str__': ( 'api/models.html#dynamicaltrajectory.__str__',
                                                                                    'circadian/models.py'),
                                  'circadian.models.DynamicalTrajectory.get_batch': ( 'api/models.html#dynamicaltrajectory.get_batch',
                                                                                      'circadian/models.py'),
                                  'circadian.models.Forger99': ('api/models.html#forger99', 'circadian/models.py'),
                                  'circadian.models.Forger99.__init__': ('api/models.html#forger99.__init__', 'circadian/models.py'),
                                  'circadian.models.Forger99.__repr__': ('api/models.html#forger99.__repr__', 'circadian/models.py'),
                                  'circadian.models.Forger99.__str__': ('api/models.html#forger99.__str__', 'circadian/models.py'),
                                  'circadian.models.Forger99.amplitude': ('api/models.html#forger99.amplitude', 'circadian/models.py'),
                                  'circadian.models.Forger99.cbt': ('api/models.html#forger99.cbt', 'circadian/models.py'),
                                  'circadian.models.Forger99.derv': ('api/models.html#forger99.derv', 'circadian/models.py'),
                                  'circadian.models.Forger99.dlmos': ('api/models.html#forger99.dlmos', 'circadian/models.py'),
                                  'circadian.models.Forger99.integrate': ('api/models.html#forger99.integrate', 'circadian/models.py'),
                                  'circadian.models.Forger99.phase': ('api/models.html#forger99.phase', 'circadian/models.py'),
                                  'circadian.models.Hannay19': ('api/models.html#hannay19', 'circadian/models.py'),
                                  'circadian.models.Hannay19.__init__': ('api/models.html#hannay19.__init__', 'circadian/models.py'),
                                  'circadian.models.Hannay19.__repr__': ('api/models.html#hannay19.__repr__', 'circadian/models.py'),
                                  'circadian.models.Hannay19.__str__': ('api/models.html#hannay19.__str__', 'circadian/models.py'),
                                  'circadian.models.Hannay19.amplitude': ('api/models.html#hannay19.amplitude', 'circadian/models.py'),
                                  'circadian.models.Hannay19.cbt': ('api/models.html#hannay19.cbt', 'circadian/models.py'),
                                  'circadian.models.Hannay19.derv': ('api/models.html#hannay19.derv', 'circadian/models.py'),
                                  'circadian.models.Hannay19.dlmos': ('api/models.html#hannay19.dlmos', 'circadian/models.py'),
                                  'circadian.models.Hannay19.integrate': ('api/models.html#hannay19.integrate', 'circadian/models.py'),
                                  'circadian.models.Hannay19.phase': ('api/models.html#hannay19.phase', 'circadian/models.py'),
                                  'circadian.models.Hannay19TP': ('api/models.html#hannay19tp', 'circadian/models.py'),
                                  'circadian.models.Hannay19TP.__init__': ('api/models.html#hannay19tp.__init__', 'circadian/models.py'),
                                  'circadian.models.Hannay19TP.__repr__': ('api/models.html#hannay19tp.__repr__', 'circadian/models.py'),
                                  'circadian.models.Hannay19TP.__str__': ('api/models.html#hannay19tp.__str__', 'circadian/models.py'),
                                  'circadian.models.Hannay19TP.amplitude': ('api/models.html#hannay19tp.amplitude', 'circadian/models.py'),
                                  'circadian.models.Hannay19TP.cbt': ('api/models.html#hannay19tp.cbt', 'circadian/models.py'),
                                  'circadian.models.Hannay19TP.derv': ('api/models.html#hannay19tp.derv', 'circadian/models.py'),
                                  'circadian.models.Hannay19TP.dlmos': ('api/models.html#hannay19tp.dlmos', 'circadian/models.py'),
                                  'circadian.models.Hannay19TP.integrate': ('api/models.html#hannay19tp.integrate', 'circadian/models.py'),
                                  'circadian.models.Hannay19TP.phase': ('api/models.html#hannay19tp.phase', 'circadian/models.py'),
                                  'circadian.models.Jewett99': ('api/models.html#jewett99', 'circadian/models.py'),
                                  'circadian.models.Jewett99.__init__': ('api/models.html#jewett99.__init__', 'circadian/models.py'),
                                  'circadian.models.Jewett99.__repr__': ('api/models.html#jewett99.__repr__', 'circadian/models.py'),
                                  'circadian.models.Jewett99.__str__': ('api/models.html#jewett99.__str__', 'circadian/models.py'),
                                  'circadian.models.Jewett99.amplitude': ('api/models.html#jewett99.amplitude', 'circadian/models.py'),
                                  'circadian.models.Jewett99.cbt': ('api/models.html#jewett99.cbt', 'circadian/models.py'),
                                  'circadian.models.Jewett99.derv': ('api/models.html#jewett99.derv', 'circadian/models.py'),
                                  'circadian.models.Jewett99.dlmos': ('api/models.html#jewett99.dlmos', 'circadian/models.py'),
                                  'circadian.models.Jewett99.integrate': ('api/models.html#jewett99.integrate', 'circadian/models.py'),
                                  'circadian.models.Jewett99.phase': ('api/models.html#jewett99.phase', 'circadian/models.py'),
                                  'circadian.models._check_cbtmin_spacing': ( 'api/models.html#_check_cbtmin_spacing',
                                                                              'circadian/models.py'),
                                  'circadian.models._get_default_initial_condition': ( 'api/models.html#_get_default_initial_condition',
                                                                                       'circadian/models.py'),
                                  'circadian.models._initial_condition_input_checking': ( 'api/models.html#_initial_condition_input_checking',
                                                                                          'circadian/models.py'),
                                  'circadian.models._light_input_checking': ( 'api/models.html#_light_input_checking',
                                                                              'circadian/models.py'),
                                  'circadian.models._model_input_checking': ( 'api/models.html#_model_input_checking',
                                                                              'circadian/models.py'),
                                  'circadian.models._parameter_input_checking': ( 'api/models.html#_parameter_input_checking',
                                                                                  'circadian/models.py'),
                                  'circadian.models._positive_int_checking': ( 'api/models.html#_positive_int_checking',
                                                                               'circadian/models.py'),
                                  'circadian.models._state_input_checking': ( 'api/models.html#_state_input_checking',
                                                                              'circadian/models.py'),
                                  'circadian.models._time_input_checking': ('api/models.html#_time_input_checking', 'circadian/models.py'),
                                  'circadian.models._wake_input_checking': ('api/models.html#_wake_input_checking', 'circadian/models.py')},
            'circadian.phasetools': { 'circadian.phasetools.cosinor': ('api/phasetools.html#cosinor', 'circadian/phasetools.py'),
                                      'circadian.phasetools.cosinor_goals': ( 'api/phasetools.html#cosinor_goals',
                                                                              'circadian/phasetools.py'),
                                      'circadian.phasetools.cosinor_phase': ( 'api/phasetools.html#cosinor_phase',
                                                                              'circadian/phasetools.py')},
            'circadian.plots': { 'circadian.plots.Actogram': ('api/plots.html#actogram', 'circadian/plots.py'),
                                 'circadian.plots.Actogram.__init__': ('api/plots.html#actogram.__init__', 'circadian/plots.py'),
                                 'circadian.plots.Actogram.addLightSchedule': ( 'api/plots.html#actogram.addlightschedule',
                                                                                'circadian/plots.py'),
                                 'circadian.plots.Actogram.addRect': ('api/plots.html#actogram.addrect', 'circadian/plots.py'),
                                 'circadian.plots.Actogram.getRectangles': ('api/plots.html#actogram.getrectangles', 'circadian/plots.py'),
                                 'circadian.plots.Actogram.plot_phasemarker': ( 'api/plots.html#actogram.plot_phasemarker',
                                                                                'circadian/plots.py'),
                                 'circadian.plots.Actogram.plot_phasetimes': ( 'api/plots.html#actogram.plot_phasetimes',
                                                                               'circadian/plots.py'),
                                 'circadian.plots.Stroboscopic': ('api/plots.html#stroboscopic', 'circadian/plots.py'),
                                 'circadian.plots.Stroboscopic.__init__': ('api/plots.html#stroboscopic.__init__', 'circadian/plots.py'),
                                 'circadian.plots.Stroboscopic._make_strobo_plot': ( 'api/plots.html#stroboscopic._make_strobo_plot',
                                                                                     'circadian/plots.py'),
                                 'circadian.plots.Stroboscopic.add_strobo_plot': ( 'api/plots.html#stroboscopic.add_strobo_plot',
                                                                                   'circadian/plots.py'),
                                 'circadian.plots.plot_actogram': ('api/plots.html#plot_actogram', 'circadian/plots.py'),
                                 'circadian.plots.plot_mae': ('api/plots.html#plot_mae', 'circadian/plots.py'),
                                 'circadian.plots.plot_phasetimes': ('api/plots.html#plot_phasetimes', 'circadian/plots.py'),
                                 'circadian.plots.plot_torus': ('api/plots.html#plot_torus', 'circadian/plots.py')},
            'circadian.prc': { 'circadian.prc.DosageResponseCurve': ('api/prc.html#dosageresponsecurve', 'circadian/prc.py'),
                               'circadian.prc.DosageResponseCurve.__init__': ( 'api/prc.html#dosageresponsecurve.__init__',
                                                                               'circadian/prc.py'),
                               'circadian.prc.DosageResponseCurve.light_dosage': ( 'api/prc.html#dosageresponsecurve.light_dosage',
                                                                                   'circadian/prc.py'),
                               'circadian.prc.DosageResponseCurve.light_dosage_day1': ( 'api/prc.html#dosageresponsecurve.light_dosage_day1',
                                                                                        'circadian/prc.py'),
                               'circadian.prc.IntensityResponseCurveLight': ( 'api/prc.html#intensityresponsecurvelight',
                                                                              'circadian/prc.py'),
                               'circadian.prc.IntensityResponseCurveLight.__init__': ( 'api/prc.html#intensityresponsecurvelight.__init__',
                                                                                       'circadian/prc.py'),
                               'circadian.prc.IntensityResponseCurveLight.light_intensity': ( 'api/prc.html#intensityresponsecurvelight.light_intensity',
                                                                                              'circadian/prc.py'),
                               'circadian.prc.PRCFinder': ('api/prc.html#prcfinder', 'circadian/prc.py'),
                               'circadian.prc.PRCFinder.exp_type0': ('api/prc.html#prcfinder.exp_type0', 'circadian/prc.py'),
                               'circadian.prc.PRCFinder.prc_type0_point': ('api/prc.html#prcfinder.prc_type0_point', 'circadian/prc.py'),
                               'circadian.prc.PRCFinder.type0x': ('api/prc.html#prcfinder.type0x', 'circadian/prc.py'),
                               'circadian.prc.PhaseResponseCurveLight': ('api/prc.html#phaseresponsecurvelight', 'circadian/prc.py'),
                               'circadian.prc.PhaseResponseCurveLight.__init__': ( 'api/prc.html#phaseresponsecurvelight.__init__',
                                                                                   'circadian/prc.py'),
                               'circadian.prc.PhaseResponseCurveLight.light_amplitude_resetting': ( 'api/prc.html#phaseresponsecurvelight.light_amplitude_resetting',
                                                                                                    'circadian/prc.py'),
                               'circadian.prc.PhaseResponseCurveLight.light_czeiler_type0': ( 'api/prc.html#phaseresponsecurvelight.light_czeiler_type0',
                                                                                              'circadian/prc.py'),
                               'circadian.prc.PhaseResponseCurveLight.light_hilaire': ( 'api/prc.html#phaseresponsecurvelight.light_hilaire',
                                                                                        'circadian/prc.py'),
                               'circadian.prc.PhaseResponseCurveLight.light_khalsa': ( 'api/prc.html#phaseresponsecurvelight.light_khalsa',
                                                                                       'circadian/prc.py'),
                               'circadian.prc.RimmerLightPulseLight': ('api/prc.html#rimmerlightpulselight', 'circadian/prc.py'),
                               'circadian.prc.RimmerLightPulseLight.__init__': ( 'api/prc.html#rimmerlightpulselight.__init__',
                                                                                 'circadian/prc.py'),
                               'circadian.prc.RimmerLightPulseLight.make_pulse_rimmer': ( 'api/prc.html#rimmerlightpulselight.make_pulse_rimmer',
                                                                                          'circadian/prc.py'),
                               'circadian.prc.RimmerLightPulseLight.pulse_rimmer_start': ( 'api/prc.html#rimmerlightpulselight.pulse_rimmer_start',
                                                                                           'circadian/prc.py'),
                               'circadian.prc.get_pulse': ('api/prc.html#get_pulse', 'circadian/prc.py'),
                               'circadian.prc.heaviside': ('api/prc.html#heaviside', 'circadian/prc.py'),
                               'circadian.prc.make_pulse': ('api/prc.html#make_pulse', 'circadian/prc.py')},
            'circadian.readers': { 'circadian.readers.WearableData': ('api/readers.html#wearabledata', 'circadian/readers.py'),
                                   'circadian.readers.WearableData.__getitem__': ( 'api/readers.html#wearabledata.__getitem__',
                                                                                   'circadian/readers.py'),
                                   'circadian.readers.WearableData.__post_init__': ( 'api/readers.html#wearabledata.__post_init__',
                                                                                     'circadian/readers.py'),
                                   'circadian.readers.WearableData._copy_with_metadata': ( 'api/readers.html#wearabledata._copy_with_metadata',
                                                                                           'circadian/readers.py'),
                                   'circadian.readers.WearableData.activity': ( 'api/readers.html#wearabledata.activity',
                                                                                'circadian/readers.py'),
                                   'circadian.readers.WearableData.aggregate': ( 'api/readers.html#wearabledata.aggregate',
                                                                                 'circadian/readers.py'),
                                   'circadian.readers.WearableData.build_sleep_chunks': ( 'api/readers.html#wearabledata.build_sleep_chunks',
                                                                                          'circadian/readers.py'),
                                   'circadian.readers.WearableData.date_bounds': ( 'api/readers.html#wearabledata.date_bounds',
                                                                                   'circadian/readers.py'),
                                   'circadian.readers.WearableData.datetime': ( 'api/readers.html#wearabledata.datetime',
                                                                                'circadian/readers.py'),
                                   'circadian.readers.WearableData.fillna': ( 'api/readers.html#wearabledata.fillna',
                                                                              'circadian/readers.py'),
                                   'circadian.readers.WearableData.filter': ( 'api/readers.html#wearabledata.filter',
                                                                              'circadian/readers.py'),
                                   'circadian.readers.WearableData.from_json': ( 'api/readers.html#wearabledata.from_json',
                                                                                 'circadian/readers.py'),
                                   'circadian.readers.WearableData.get_date': ( 'api/readers.html#wearabledata.get_date',
                                                                                'circadian/readers.py'),
                                   'circadian.readers.WearableData.get_timestamp': ( 'api/readers.html#wearabledata.get_timestamp',
                                                                                     'circadian/readers.py'),
                                   'circadian.readers.WearableData.groupby': ( 'api/readers.html#wearabledata.groupby',
                                                                               'circadian/readers.py'),
                                   'circadian.readers.WearableData.head': ('api/readers.html#wearabledata.head', 'circadian/readers.py'),
                                   'circadian.readers.WearableData.heartrate': ( 'api/readers.html#wearabledata.heartrate',
                                                                                 'circadian/readers.py'),
                                   'circadian.readers.WearableData.join': ('api/readers.html#wearabledata.join', 'circadian/readers.py'),
                                   'circadian.readers.WearableData.light_estimate': ( 'api/readers.html#wearabledata.light_estimate',
                                                                                      'circadian/readers.py'),
                                   'circadian.readers.WearableData.plot_heartrate': ( 'api/readers.html#wearabledata.plot_heartrate',
                                                                                      'circadian/readers.py'),
                                   'circadian.readers.WearableData.plot_hr_steps': ( 'api/readers.html#wearabledata.plot_hr_steps',
                                                                                     'circadian/readers.py'),
                                   'circadian.readers.WearableData.plot_light_activity': ( 'api/readers.html#wearabledata.plot_light_activity',
                                                                                           'circadian/readers.py'),
                                   'circadian.readers.WearableData.scatter_hr_steps': ( 'api/readers.html#wearabledata.scatter_hr_steps',
                                                                                        'circadian/readers.py'),
                                   'circadian.readers.WearableData.steps': ('api/readers.html#wearabledata.steps', 'circadian/readers.py'),
                                   'circadian.readers.WearableData.steps_hr_loglinear': ( 'api/readers.html#wearabledata.steps_hr_loglinear',
                                                                                          'circadian/readers.py'),
                                   'circadian.readers.WearableData.tail': ('api/readers.html#wearabledata.tail', 'circadian/readers.py'),
                                   'circadian.readers.WearableData.time_hour_bounds': ( 'api/readers.html#wearabledata.time_hour_bounds',
                                                                                        'circadian/readers.py'),
                                   'circadian.readers.WearableData.time_total': ( 'api/readers.html#wearabledata.time_total',
                                                                                  'circadian/readers.py'),
                                   'circadian.readers.WearableData.timestamp': ( 'api/readers.html#wearabledata.timestamp',
                                                                                 'circadian/readers.py'),
                                   'circadian.readers.WearableData.to_json': ( 'api/readers.html#wearabledata.to_json',
                                                                               'circadian/readers.py'),
                                   'circadian.readers.WearableData.trim_by_hour': ( 'api/readers.html#wearabledata.trim_by_hour',
                                                                                    'circadian/readers.py'),
                                   'circadian.readers.WearableData.trim_by_idx': ( 'api/readers.html#wearabledata.trim_by_idx',
                                                                                   'circadian/readers.py'),
                                   'circadian.readers.WearableData.trim_by_timestamp': ( 'api/readers.html#wearabledata.trim_by_timestamp',
                                                                                         'circadian/readers.py'),
                                   'circadian.readers.WearableData.utc_to_hrs': ( 'api/readers.html#wearabledata.utc_to_hrs',
                                                                                  'circadian/readers.py'),
                                   'circadian.readers.WearableData.wake': ('api/readers.html#wearabledata.wake', 'circadian/readers.py'),
                                   'circadian.readers.combine_wearable_streams': ( 'api/readers.html#combine_wearable_streams',
                                                                                   'circadian/readers.py'),
                                   'circadian.readers.read_actiwatch': ('api/readers.html#read_actiwatch', 'circadian/readers.py'),
                                   'circadian.readers.read_standard_csv': ('api/readers.html#read_standard_csv', 'circadian/readers.py'),
                                   'circadian.readers.read_standard_json': ('api/readers.html#read_standard_json', 'circadian/readers.py')},
            'circadian.sleep': { 'circadian.sleep.TwoProcessModel': ('api/sleep.html#twoprocessmodel', 'circadian/sleep.py'),
                                 'circadian.sleep.TwoProcessModel.__call__': ( 'api/sleep.html#twoprocessmodel.__call__',
                                                                               'circadian/sleep.py'),
                                 'circadian.sleep.TwoProcessModel.__init__': ( 'api/sleep.html#twoprocessmodel.__init__',
                                                                               'circadian/sleep.py'),
                                 'circadian.sleep.TwoProcessModel.check_wake_status': ( 'api/sleep.html#twoprocessmodel.check_wake_status',
                                                                                        'circadian/sleep.py'),
                                 'circadian.sleep.TwoProcessModel.dhomeostat': ( 'api/sleep.html#twoprocessmodel.dhomeostat',
                                                                                 'circadian/sleep.py'),
                                 'circadian.sleep.TwoProcessModel.step_rk4': ( 'api/sleep.html#twoprocessmodel.step_rk4',
                                                                               'circadian/sleep.py'),
                                 'circadian.sleep.cluster_sleep_periods_scipy': ( 'api/sleep.html#cluster_sleep_periods_scipy',
                                                                                  'circadian/sleep.py'),
                                 'circadian.sleep.sleep_midpoint': ('api/sleep.html#sleep_midpoint', 'circadian/sleep.py')},
            'circadian.utils': { 'circadian.utils.NpEncoder': ('api/utils.html#npencoder', 'circadian/utils.py'),
                                 'circadian.utils.NpEncoder.default': ('api/utils.html#npencoder.default', 'circadian/utils.py'),
                                 'circadian.utils.abs_hour_diff': ('api/utils.html#abs_hour_diff', 'circadian/utils.py'),
                                 'circadian.utils.amplitude_percent_change': ( 'api/utils.html#amplitude_percent_change',
                                                                               'circadian/utils.py'),
                                 'circadian.utils.angle_difference': ('api/utils.html#angle_difference', 'circadian/utils.py'),
                                 'circadian.utils.cal_days_diff': ('api/utils.html#cal_days_diff', 'circadian/utils.py'),
                                 'circadian.utils.circular_av_clock': ('api/utils.html#circular_av_clock', 'circadian/utils.py'),
                                 'circadian.utils.circular_mean': ('api/utils.html#circular_mean', 'circadian/utils.py'),
                                 'circadian.utils.circular_scatter': ('api/utils.html#circular_scatter', 'circadian/utils.py'),
                                 'circadian.utils.convert_binary': ('api/utils.html#convert_binary', 'circadian/utils.py'),
                                 'circadian.utils.cut_phases_12': ('api/utils.html#cut_phases_12', 'circadian/utils.py'),
                                 'circadian.utils.interpolateLinear': ('api/utils.html#interpolatelinear', 'circadian/utils.py'),
                                 'circadian.utils.interpolateLinearExt': ('api/utils.html#interpolatelinearext', 'circadian/utils.py'),
                                 'circadian.utils.parse_dt': ('api/utils.html#parse_dt', 'circadian/utils.py'),
                                 'circadian.utils.phase_coherence': ('api/utils.html#phase_coherence', 'circadian/utils.py'),
                                 'circadian.utils.phase_coherence_clock': ('api/utils.html#phase_coherence_clock', 'circadian/utils.py'),
                                 'circadian.utils.phase_difference': ('api/utils.html#phase_difference', 'circadian/utils.py'),
                                 'circadian.utils.phase_ic_guess': ('api/utils.html#phase_ic_guess', 'circadian/utils.py'),
                                 'circadian.utils.redact_dates': ('api/utils.html#redact_dates', 'circadian/utils.py'),
                                 'circadian.utils.simple_norm_stepshr_sleep_classifier': ( 'api/utils.html#simple_norm_stepshr_sleep_classifier',
                                                                                           'circadian/utils.py'),
                                 'circadian.utils.split_drop_data': ('api/utils.html#split_drop_data', 'circadian/utils.py'),
                                 'circadian.utils.split_missing_data': ('api/utils.html#split_missing_data', 'circadian/utils.py'),
                                 'circadian.utils.subtract_clock_times': ('api/utils.html#subtract_clock_times', 'circadian/utils.py'),
                                 'circadian.utils.times_to_angle': ('api/utils.html#times_to_angle', 'circadian/utils.py'),
                                 'circadian.utils.timezone_mapper': ('api/utils.html#timezone_mapper', 'circadian/utils.py')}}}
